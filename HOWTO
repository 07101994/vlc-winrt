How to compile VLC for WinRT:
-----------------------------

You need:
* Visual Studio 2012
* Windows 8

If you are only on Windows, skip the step 0)

0) Cross-compile libvlc for WinRT
---------------------------------
You need:
* A very, very, very recent Linux
* build-essentials and all related build tools (make, autotools, git, etc...)
* Prodigious patience and tenacity :)

Build and install mingw-w64 SVN rev 5568 or higher (for libwinstorecompat).
Be sure to pass --disable-shared when configuring GCC.

Why? Statically linking to
libgcc.a will ensure that all unused methods get stripped. It will drastically
reduce the number of forbidden calls.

Run ./compile.sh and generate vlc.7z

1) Extract libVLC
-----------------

If you skipped step 0), take the nightly build vlc.7z

Extract the libVLC contents from vlc.7z to vlc/

You need to add a libvlccore.lib if it is missing from the package.
You can regenerate it using https://wiki.videolan.org/GenerateLibFromDll/

2) Build and package the front-end
----------------------------------
Open the VLC_WinRT solution in app/VLC_WINRT.sln 

3) Install MvvMLight through NuGet
----------------------------------

- Tools -> Library Package Manager -> Package Manager Console

In the console, click "Restore"

4a) Get your developer signature from your account
--------------------------------------------------
If you don't have a dev account, see the next paragraph

4b) Local signature
-------------------
Package.appxmanifest, and generate a self-signed cert

Project → Store → Create App Packages...
Select target "Debug (Win32)"
Build the package.

Now we have to import the self-signed cert into the local computer:

Open MMC
File → Add/Remove Snap In...
Certificates → Add
Select "Computer account"
Select "Local computer" (already selected), press Finish
OK to close "Add/Remove Snap-ins" dialog
Certificates (Local Computer) → Trusted Root Certification Authorities → Certificates
Right click, All Tasks... → Import...
Next
Select your "VLC_WINRT_1.0.0.0_x86_Debug.cer"
Next
Finish

5) Build
--------
Click on Build Solution. 

Click on Deploy Solution

Profit. \o/
 
6) Extra: Helpful snippets and tools
------------------------------------
Use http://technet.microsoft.com/en-us/sysinternals/bb896647 DebugView to view the debug logs
And Procmon ( http://technet.microsoft.com/en-ca/sysinternals/bb896645.aspx ) helps to see and debug events (like loading DLLs/modules/etc)

Quick one-liners to remove ugly mode changes and ugly CR-LF line endings.
git status -s | grep "^ M " | awk '{ print $2; }' | xargs chmod 644
git status -s | grep "^ M " | awk '{ print $2; }' | xargs dos2unix
