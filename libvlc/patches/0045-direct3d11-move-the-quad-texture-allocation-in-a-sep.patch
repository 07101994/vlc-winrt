From dd0a8732aa19ba0285d4e241f4d6c125cb1f1c83 Mon Sep 17 00:00:00 2001
From: Steve Lhomme <robux4@videolabs.io>
Date: Wed, 25 Jan 2017 17:26:19 +0100
Subject: [PATCH 45/50] direct3d11: move the quad texture allocation in a
 separate function

---
 modules/video_output/win32/direct3d11.c | 99 ++++++++++++++++++++-------------
 1 file changed, 61 insertions(+), 38 deletions(-)

diff --git a/modules/video_output/win32/direct3d11.c b/modules/video_output/win32/direct3d11.c
index d1fe2744ed..68b30a2621 100644
--- a/modules/video_output/win32/direct3d11.c
+++ b/modules/video_output/win32/direct3d11.c
@@ -664,6 +664,56 @@ static int AllocateShaderView(vout_display_t *vd, const d3d_format_t *format,
     return VLC_SUCCESS;
 }
 
+static int AllocateTextures(vout_display_t *vd, const d3d_format_t *cfg,
+                            const video_format_t *fmt, unsigned pool_size,
+                            ID3D11Texture2D *textures[])
+{
+    int plane;
+    HRESULT hr;
+    ID3D11Texture2D *slicedTexture = NULL;
+    D3D11_TEXTURE2D_DESC texDesc;
+    ZeroMemory(&texDesc, sizeof(texDesc));
+    texDesc.MipLevels = 1;
+    texDesc.SampleDesc.Count = 1;
+    texDesc.MiscFlags = 0; //D3D11_RESOURCE_MISC_SHARED;
+    texDesc.Usage = D3D11_USAGE_DEFAULT;
+    texDesc.CPUAccessFlags = 0;
+    texDesc.Format = cfg->formatTexture;
+    texDesc.BindFlags = D3D11_BIND_DECODER | D3D11_BIND_SHADER_RESOURCE;
+    texDesc.ArraySize = pool_size;
+    texDesc.Height = fmt->i_height;
+    texDesc.Width = fmt->i_width;
+
+    hr = ID3D11Device_CreateTexture2D( vd->sys->d3ddevice, &texDesc, NULL, &slicedTexture );
+    if (FAILED(hr)) {
+        msg_Err(vd, "CreateTexture2D failed for the %d pool. (hr=0x%0lx)", pool_size, hr);
+        goto error;
+    }
+
+    for (unsigned picture_count = 0; picture_count < pool_size; picture_count++) {
+        textures[picture_count * D3D11_MAX_SHADER_VIEW] = slicedTexture;
+        ID3D11Texture2D_AddRef(slicedTexture);
+
+        for (plane = 1; plane < D3D11_MAX_SHADER_VIEW; plane++) {
+            if (!cfg->resourceFormat[plane])
+                textures[picture_count * D3D11_MAX_SHADER_VIEW + plane] = NULL;
+            else
+            {
+                textures[picture_count * D3D11_MAX_SHADER_VIEW + plane] = textures[picture_count * D3D11_MAX_SHADER_VIEW];
+                ID3D11Texture2D_AddRef(textures[picture_count * D3D11_MAX_SHADER_VIEW + plane]);
+            }
+        }
+    }
+
+    if (slicedTexture)
+        ID3D11Texture2D_Release(slicedTexture);
+    return VLC_SUCCESS;
+error:
+    if (slicedTexture)
+        ID3D11Texture2D_Release(slicedTexture);
+    return VLC_EGENERIC;
+}
+
 static picture_pool_t *Pool(vout_display_t *vd, unsigned pool_size)
 {
     if ( vd->sys->sys.pool != NULL )
@@ -673,6 +723,7 @@ static picture_pool_t *Pool(vout_display_t *vd, unsigned pool_size)
     picture_t**       pictures = NULL;
     unsigned          picture_count = 0;
     unsigned          plane;
+    ID3D11Texture2D  *textures[pool_size * D3D11_MAX_SHADER_VIEW];
     HRESULT           hr;
 
     const d3d_format_t *cfg = GetOutputFormat(vd, vd->fmt.i_chroma, 0, true, false);
@@ -689,52 +740,25 @@ static picture_pool_t *Pool(vout_display_t *vd, unsigned pool_size)
     if (!pictures)
         goto error;
 
-    D3D11_TEXTURE2D_DESC texDesc;
-    ZeroMemory(&texDesc, sizeof(texDesc));
-    texDesc.Width = vd->fmt.i_width;
-    texDesc.Height = vd->fmt.i_height;
-    texDesc.MipLevels = 1;
-    texDesc.Format = vd->sys->picQuadConfig->formatTexture;
-    texDesc.SampleDesc.Count = 1;
-    texDesc.MiscFlags = 0; //D3D11_RESOURCE_MISC_SHARED;
-    texDesc.Usage = D3D11_USAGE_DEFAULT;
-    texDesc.BindFlags = D3D11_BIND_DECODER | D3D11_BIND_SHADER_RESOURCE;
-    texDesc.CPUAccessFlags = 0;
-
-    texDesc.ArraySize = pool_size;
-
-    ID3D11Texture2D *texture;
-    hr = ID3D11Device_CreateTexture2D( vd->sys->d3ddevice, &texDesc, NULL, &texture );
-    if (FAILED(hr)) {
-        msg_Err(vd, "CreateTexture2D failed for the %d pool. (hr=0x%0lx)", pool_size, hr);
+    if (AllocateTextures(vd, vd->sys->picQuadConfig, &vd->fmt, pool_size, textures))
         goto error;
-    }
 
     for (picture_count = 0; picture_count < pool_size; picture_count++) {
         picture_sys_t *picsys = calloc(1, sizeof(*picsys));
         if (unlikely(picsys == NULL))
             goto error;
 
-        ID3D11Texture2D_AddRef(texture);
-        picsys->texture[KNOWN_DXGI_INDEX] = texture;
-        picsys->slice_index = picture_count;
-        picsys->formatTexture = vd->sys->picQuadConfig->formatTexture;
-        picsys->context = vd->sys->d3dcontext;
-
-        plane = KNOWN_DXGI_INDEX + 1;
-        for (; plane < D3D11_MAX_SHADER_VIEW; plane++) {
-            if (!vd->sys->picQuadConfig->resourceFormat[plane])
-                picsys->texture[plane] = NULL;
-            else
-            {
-                picsys->texture[plane] = picsys->texture[KNOWN_DXGI_INDEX];
-                ID3D11Texture2D_AddRef(picsys->texture[plane]);
-            }
-        }
+        for (plane = 0; plane < D3D11_MAX_SHADER_VIEW; plane++)
+            picsys->texture[plane] = textures[picture_count * D3D11_MAX_SHADER_VIEW + plane];
 
         if (AllocateShaderView(vd, vd->sys->picQuadConfig, picture_count, picsys) != VLC_SUCCESS)
             goto error;
 
+        picsys->slice_index = picture_count;
+        picsys->formatTexture = vd->sys->picQuadConfig->formatTexture;
+        picsys->context = vd->sys->d3dcontext;
+        ID3D11DeviceContext_AddRef(picsys->context);
+
         picture_resource_t resource = {
             .p_sys = picsys,
             .pf_destroy = DestroyDisplayPoolPicture,
@@ -749,10 +773,9 @@ static picture_pool_t *Pool(vout_display_t *vd, unsigned pool_size)
 
         pictures[picture_count] = picture;
     }
-    ID3D11Texture2D_Release(texture);
 
-    msg_Dbg(vd, "ID3D11VideoDecoderOutputView succeed with %d surfaces (%dx%d) texture 0x%p context 0x%p",
-            pool_size, vd->fmt.i_width, vd->fmt.i_height, texture, vd->sys->d3dcontext);
+    msg_Dbg(vd, "ID3D11VideoDecoderOutputView succeed with %d surfaces (%dx%d) context 0x%p",
+            pool_size, vd->fmt.i_width, vd->fmt.i_height, vd->sys->d3dcontext);
 
     picture_pool_configuration_t pool_cfg;
     memset(&pool_cfg, 0, sizeof(pool_cfg));
-- 
2.11.0

